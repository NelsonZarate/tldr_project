# Resumo da Aula - Tópicos Abordados

## 1. SUDO
- **O que é o sudo?**  
  O `sudo` (SuperUser Do) é um comando usado para executar tarefas que requerem permissões de administrador. Ele permite executar comandos como se fosse o usuário root (administrador), necessário para instalar ou remover pacotes e modificar arquivos do sistema.

- **Exemplo:**
  - `sudo apt install nome_do_pacote` → Instala um pacote usando permissões de administrador.

## 2. APT install
- **APT** é o gerenciador de pacotes no Ubuntu (e outras distribuições Debian). Ele é usado para instalar, atualizar e remover pacotes.
- **Exemplo:**  
  - `sudo apt install nome_do_pacote` → Instala o pacote desejado.
  - `sudo apt update` → Atualiza a lista de pacotes disponíveis no repositório.

## 3. Dockerfile: Como construir e rodar uma imagem Docker
Um `Dockerfile` é um arquivo de texto usado para automatizar a criação de imagens Docker. Ele define as etapas necessárias para configurar o ambiente dentro de um container.

- **Comandos principais em um Dockerfile:**
  - `FROM <base_image>`: Define a imagem base para o container (ex: `FROM ubuntu`).
  - `RUN <comando>`: Executa um comando dentro da imagem, como instalar pacotes.
  - `COPY <source> <target>`: Copia arquivos ou pastas do sistema local para dentro da imagem Docker.
  - `CMD ["comando", "arg1", "arg2"]`: Define o comando que será executado quando o container for iniciado.

- **Exemplo de Dockerfile:**
  ```dockerfile
  FROM ubuntu
  RUN apt update -y
  RUN apt install -y vim
  COPY ./txt.txt /app/txt.txt
  CMD ["vim", "--help"]

## 4. Construção e Execução de Imagens Docker
   
  - ** Para construir a imagem a partir do Dockerfile: **
        docker build -f <path_to_dockerfile> <contexto>

    Exemplo:
        bash
        Copiar código
        docker build -f ops/Dockerfile ./script-project

    Para rodar um container a partir de uma imagem:

    bash
    Copiar código
    docker run -it nome_da_imagem
    O parâmetro -it torna o container interativo, permitindo a interação com o terminal.

 ## 5. Shebang
    O Shebang (#!/bin/bash) é a primeira linha de um script que indica qual interpretador (no caso, o Bash) será usado para executar o script.

    Exemplo:
        #!/bin/bash
        echo "Olá, mundo!"

## 6. Atribuição de Variáveis
    Para atribuir valores a variáveis em scripts Bash, usamos a sintaxe:
        var="valor"

    Exemplo:
        nome="Maria"
        echo $nome
## 7. Entrada e Saída de Dados
    Saída (echo): O comando echo imprime mensagens na saída padrão (geralmente o terminal).

    echo "Mensagem para o usuário"
    Entrada (read): O comando read lê a entrada do usuário e atribui o valor a uma variável.

    read nome
    echo "Olá, $nome!"

## 8. Trabalhando com Docker: COPY e WORKDIR
  COPY
  O comando COPY é utilizado em um Dockerfile para copiar arquivos ou diretórios do sistema local para o container Docker.
  Exemplo:
  dockerfile
  Copiar código
  COPY ./script-projects/sub_command.sh .
  Neste exemplo, o arquivo sub_command.sh que está no diretório ./script-projects/ será copiado para o diretório de trabalho no container, que é o diretório atual (.).
  WORKDIR
  O comando WORKDIR define o diretório de trabalho dentro do container. Isso significa que todos os comandos subsequentes (como RUN, CMD e COPY) serão executados nesse diretório.

Exemplo:

### dockerfile

WORKDIR /home/ubuntu/script
Nesse exemplo, o diretório /home/ubuntu/script é definido como o diretório de trabalho. Qualquer comando executado a seguir será relativo a esse diretório.

Exemplo completo com o WORKDIR e COPY:

dockerfile
Copiar código
FROM ubuntu
RUN apt update -y
RUN apt install -y vim
WORKDIR /home/ubuntu/script
COPY ./script-projects/sub_command.sh .
CMD ["bash"]
Exemplo de script: sub_command.sh
Aqui está o script sub_command.sh, que foi copiado para o container:

#!/bin/bash
sub_command(){
    A=10
    B=20
    echo $((A + B))  # A soma de A e B é exibida
}

sub_command
Esse script define uma função chamada sub_command, que soma as variáveis A e B e imprime o resultado. No Dockerfile, o comando CMD ["bash"] inicia o Bash, onde você pode executar o script.

